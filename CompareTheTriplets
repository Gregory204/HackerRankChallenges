#include <iostream>
#include <vector>
using namespace std;

/*
 * Complete the 'compareTriplets' function below.
 *
 * The function is expected to return an INTEGER_ARRAY.
 * The function accepts following parameters:
 *  1. INTEGER_ARRAY a
 *  2. INTEGER_ARRAY b
 */

vector<int> compareTriplets(vector<int> a, vector<int> b) {
    int count_bob = 0;
    int count_alice = 0;
    int count_tie = 0;
    for(vector<int>::size_type i = 0;i < a.size();i++){
        if(a[i] >= 1 && a[i] <= 100){       //constraint from a range of 1 to 100
            if(b[i] >= 1 && b[i] <= 100){   //constraint from a range of 1 to 100
                if(a[i] > b[i]){
                    count_alice++;  //increments by 1 each time alice wins
                }
                else if(b[i] > a[i]){
                    count_bob++;    //increments by 1 each time bob wins
                }
                else{
                    count_tie++;    //increments by 1 each time both win
                    //but mainly used just to junk the score if they tie
                }
            }
        }
    }
    vector<int> bog = {count_alice, count_bob};
    //New Vector bog is used to keep track of alice and 
    //bobs wins
    return bog;
}

int main()
{
    vector<int> array = {1,2,3};    //vector 1 contains set of integers
    vector<int> array2 = {2,2,1};   //vector 2 contains set of integers

    vector<int> bog = compareTriplets(array, array2);
    //function takes action on array1 and array2
    //to compare the elements for each specific
    //position

    cout << bog[0] << " " << bog[1] << endl;
    /*
    bog[0] represents the wins for Alice
    bog[1] represents the wins for Bob
    */
    return 0;
}

/*
for (vector<int>::size_type i = 0; i < a.size(); i++) 
this line is to make sure that the loop variable type can handle the 
size of the vectors. Also a.size() we only use that and not both
of the vectors because we assume both are already even in size.
*/

/* TASK
Alice and Bob each created one problem for HackerRank. A reviewer rates the two challenges, awarding points on a scale from 1 to 100 for three categories: problem clarity, originality, and difficulty.
The rating for Alice's challenge is the triplet a = (a[0], a[1], a[2]), and the rating for Bob's challenge is the triplet b = (b[0], b[1], b[2]).
The task is to find their comparison points by comparing a[0] with b[0], a[1] with b[1], and a[2] with b[2].
If a[i] > b[i], then Alice is awarded 1 point.
If a[i] < b[i], then Bob is awarded 1 point.
If a[i] = b[i], then neither person receives a point.
Comparison points is the total points a person earned.
Given a and b, determine their respective comparison points.
Example
a = [1, 2, 3]
b = [3, 2, 1]
For elements *0*, Bob is awarded a point because a[0] .
For the equal elements a[1] and b[1], no points are earned.
Finally, for elements 2, a[2] > b[2] so Alice receives a point.
The return array is [1, 1] with Alice's score first and Bob's second.
Function Description
Complete the function compareTriplets in the editor below.
compareTriplets has the following parameter(s):
int a[3]: Alice's challenge rating
int b[3]: Bob's challenge rating
Return
int[2]: Alice's score is in the first position, and Bob's score is in the second.
Input Format
The first line contains 3 space-separated integers, a[0], a[1], and a[2], the respective values in triplet a.
The second line contains 3 space-separated integers, b[0], b[1], and b[2], the respective values in triplet b.
*/
